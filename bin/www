#!/usr/bin/env node

/**
 * Module dependencies.
 */

require('dotenv').config();

const cluster = require('cluster');
const backgroundJobHandler = require('background_job_handler');

const { DB } = require('../models');
const seeder = require('../seeder');

const Config = require('../config');

var app = require('../app');
var debug = require('debug')('api:server');
var http = require('http');

/**
 * When server starts, create forks of it to serve 
 * the requests. This helps with load balancing.
 */
if (cluster.isMaster) {
  console.log(`Master ${process.pid} is running`);

  // seed app
  (async () => {
    try {
      const result = await seeder();
      console.log(result);
      backgroundJobHandler.start(__dirname);
      await DB.disconnect();
    } catch (error) {
      console.log(error);
      // exit app if seeding fails
      process.exit(-1);
    }
  })();

  // Fork workers.
  for (let i = 0; i < Config.WEB_WORKER_COUNT; i++) {
    cluster.fork();
  }

  cluster.on('exit', (worker, code, signal) => {
    console.log(`worker ${worker.process.pid} died`);
    cluster.fork();
  });
} else {
  /**
   * Get port from environment and store in Express.
   */

  var port = normalizePort(process.env.PORT || '10000');
  app.set('port', port);

  /**
   * Create HTTP server.
   */

  var server = http.createServer(app);

  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port);
  console.log(port);
  server.on('error', onError);
  server.on('listening', onListening);

  /**
   * Normalize a port into a number, string, or false.
   */

  function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
      // named pipe
      return val;
    }

    if (port >= 0) {
      // port number
      return port;
    }

    return false;
  }

  /**
   * Event listener for HTTP server "error" event.
   */

  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  /**
   * Event listener for HTTP server "listening" event.
   */

  function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
    debug('Listening on ' + bind);
  }
}